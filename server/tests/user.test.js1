const app = require("../app");
const testConfig = require("../configs/testConfig");
const userGroup = require("./mockDB/userGroup");
const user = require("./mockDB/user");
const statusHandler = require("../handlers/statusHandler");
const PORT_TO_TEST = 4001;
const apiController = new (require("./apiController"))(PORT_TO_TEST);
const _ = require("lodash");

beforeAll(async () => {
  // START THE TEST SERVER
  testConfig.WEBSERVER_PORT = PORT_TO_TEST;
  await app.start(testConfig);
});

describe("Create User", () => {
  beforeEach(async () => {
    // delete all userGroups from DB
    await userGroup.removeAll();

    // delete all users from DB
    await user.removeAll();
  });

  test("UserGroup ,Name ,UserName ,Password are mandatory  ", async () => {
    // make an api call with no parameters
    let createRes = await apiController.postToServer("user/create", {});

    // expect res statuscode to insufficient parameters
    expect(createRes.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    // create UserGroup called USER_GROUP_1
    let users = await userGroup.add("USER_GROUP_1");

    // // make an api call with UserGroup
    let res = await apiController.postToServer("user/create", {
      userGroup: "USER_GROUP_1"
    });

    // expect res statuscode to insufficient parameters
    expect(res.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    // make an api call with  UserGroup , Name
    let res1 = await apiController.postToServer("user/create", {
      userGroup,
      Name: "NAME1"
    });
    // expect res statuscode to insufficient parameters
    expect(res1.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with Usergroup ,Name and UserName

    let res2 = await apiController.postToServer("user/create", {
      userGroup,
      Name: "NAME1",
      UserName: "dinesh"
    });
    // expect res statuscode to insufficient parameters
    expect(res2.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with Usergroup ,UserName

    let res3 = await apiController.postToServer("user/create", {
      userGroup,
      UserName: "dinesh"
    });
    // expect res statuscode to insufficient parameters
    expect(res3.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with Usergroup ,Pssword

    let res4 = await apiController.postToServer("user/create", {
      userGroup,
      Password: "akhil123"
    });
    // expect res statuscode to insufficient parameters
    expect(res4.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with Usergroup ,Name,Pssword
    let res5 = await apiController.postToServer("user/create", {
      userGroup,
      Name: "akhil",
      Password: "akhil123"
    });
    // expect res statuscode to insufficient parameters
    expect(res5.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with Usergroup ,Username,Pssword
    let res6 = await apiController.postToServer("user/create", {
      userGroup,
      UserName: "User2",
      Password: "akhil123"
    });
    // expect res statuscode to insufficient parameters
    expect(res6.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with Usergroup ,Name,Pssword
    let res13 = await apiController.postToServer("user/create", {
      userGroup,
      UserName: "User6",
      Password: "akhil123"
    });
    // expect res statuscode to insufficient parameters
    expect(res13.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with ,Name and UserName,Password

    let res7 = await apiController.postToServer("user/create", {
      Name: "NAME1",
      UserName: "dinesh",
      Password: "akhil123"
    });
    // expect res statuscode to insufficient parameters
    expect(res7.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with ,Name

    let res8 = await apiController.postToServer("user/create", {
      Name: "NAME1"
    });
    // expect res statuscode to insufficient parameters
    expect(res8.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with ,Name,username

    let res9 = await apiController.postToServer("user/create", {
      Name: "NAME1",
      UserName: "Name3"
    });
    // expect res statuscode to insufficient parameters
    expect(res9.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with ,Name,Password

    let res10 = await apiController.postToServer("user/create", {
      Name: "NAME1",
      Password: "qwe123"
    });
    // expect res statuscode to insufficient parameters
    expect(res10.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with ,Username

    let res11 = await apiController.postToServer("user/create", {
      UserName: "Username5"
    });
    // expect res statuscode to insufficient parameters
    expect(res11.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with ,Username,Password

    let res12 = await apiController.postToServer("user/create", {
      UserName: "Username6",
      Password: "asd123"
    });
    // expect res statuscode to insufficient parameters
    expect(res12.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with Password

    let res14 = await apiController.postToServer("user/create", {
      Password: "asd123"
    });
    // expect res statuscode to insufficient parameters
    expect(res14.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    //make an api call with empty

    let res15 = await apiController.postToServer("user/create", {});
    // expect res statuscode to insufficient parameters
    expect(res15.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );
  });

  test("UserGroup doesnot exists", async () => {
    //create a usergroup
    let ug = await userGroup.add("USER_GROUP_1");

    //add user
    await user.add(ug._id, "Name_1", "USER_NAME_1", "piyush123");

    // delete all the userGroups from db
    await userGroup.removeAll();

    // make an api call with all valid parameter
    let createRes = await apiController.postToServer("user/create", {
      UserGroup: ug._id,
      Name: "NAME1",
      UserName: "dinesh",
      Password: "akhil123"
    });

    // expect res statuscode to insufficient parameters
    expect(createRes.statusCode).toEqual(
      statusHandler.ENTRY_NOT_FOUND.statusCode
    );
  });

  test("Createing user with all valid parameters  ", async () => {
    //create a usergroup
    let ug = await userGroup.add("USER_GROUP_1");

    //add user
    await user.add(ug._id, "Name_1", "USER_NAME_1", "piyush123");

    // make an api call with all valid parameter
    let createRes = await apiController.postToServer("user/create", {
      UserGroup: ug._id,
      Name: "NAME1",
      UserName: "dinesh",
      Password: "akhil123"
    });

    // expect res statuscode to insufficient parameters
    expect(createRes.statusCode).toEqual(statusHandler.SUCCESS.statusCode);

    expect(await user.isExists("USER_NAME_1")).toEqual(true);
    expect(await user.isExists("dinesh")).toEqual(true);
  });

  test("duplicate UserName not allowed ", async () => {
    // create usergroup called USER_GROUP_1
    let ug = await userGroup.add("USER_GROUP_1");

    // create user with USerName as USER_NAME_1'
    await user.add(ug._id, "PIYUSH", "USER_NAME_1", "piyush123");

    // make an api call with same UserName as USER_NAME_1
    let res1 = await apiController.postToServer("user/create", {
      UserGroup: ug._id,
      Name: "NAME1",
      UserName: "USER_NAME_1",
      Password: "hello123"
    });

    // expect res statuscode to be duplicate entry
    expect(res1.statusCode).toEqual(statusHandler.DUPLICATE_ENTRY.statusCode);
  });

  test("duplicate Name is allowed ", async () => {
    // create usergroup called USER_GROUP_1
    let ug3 = await userGroup.add("USER_GROUP_1");

    // create user with Name as NAME_1' and UserName as USER_NAME_1
    await user.add(ug3._id, "Name_1", "USER_NAME_1", "piyush123");

    // make an api call with same NAME as NAME_1 but different UserName as USER_NAME_2
    let res5 = await apiController.postToServer("user/create", {
      UserGroup: ug3._id,
      Name: "Name_1",
      UserName: "USER_NAME_2",
      Password: "hello123"
    });

    //expect res statuscode to be success
    expect(res5.statusCode).toEqual(statusHandler.SUCCESS.statusCode);

    // check user with name USER_NAME_1 exists in db
    expect(await user.isExists("USER_NAME_1")).toEqual(true);

    // check user with name USER_NAME_2 exists in db
    expect(await user.isExists("USER_NAME_2")).toEqual(true);
  });
});

describe("Fetch Users", () => {
  beforeEach(async () => {
    // delete all userGroups from DB
    await userGroup.removeAll();

    // delete all users from DB
    await user.removeAll();
  });

  test("when no user exists in DB", async () => {
    // make api call
    let res6 = await apiController.getFromServer("user/fetch", {});
    // expect res statuscode success
    expect(res6.statusCode).toEqual(statusHandler.SUCCESS.statusCode);
    // expect res msg Users : []
    expect(res6.msg.Users).toEqual([]);
  });

  test("when 1 user exists in DB", async () => {
    // add user group in db
    let ug4 = await userGroup.add("USER_GROUP_3");
    // add user in db called USER_NAME_1
    await user.add(ug4._id, "Name_1", " USER_NAME_1", "piyush123");
    // make api call
    let res7 = await apiController.getFromServer("user/fetch", {});
    // expect res statuscode success
    expect(res7.statusCode).toEqual(statusHandler.SUCCESS.statusCode);
    // expect res msg Users.length == 1
    expect(res7.msg.Users.length) == 1;

    let currentParameters = Object.getOwnPropertyNames(res7.msg.Users[0]);
    let validParamters = ["_id", "Name", "UserName", "UserGroup"];

    expect(_.isEqual(currentParameters.sort(), validParamters.sort())).toEqual(
      true
    );

    // expect res msg Users[0].UserName = USER_NAME_1
    expect(res7.msg.Users[0].UserName) == "USER_NAME_1";
  });
});

describe("Update User", () => {
  beforeEach(async () => {
    // delete all userGroups from DB
    await userGroup.removeAll();

    // delete all users from DB
    await user.removeAll();
  });

  test("UserId , UserParamaters , UserValues are required", async () => {
    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
    let ug1 = await userGroup.add("USER_GROUP_1");

    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_2
    let ug2 = await userGroup.add("USER_GROUP_2");

    // CREATE USER With UserName called USER_NAME
    let u = await user.add(ug1._id, "NAME", "USER_NAME", "PASSWORD");

    // GET ID OF THE CREATED USER
    let uId = u._id;

    // MAKE API CALL TO UPDATE ITS NAME , USER_NAME , USER_GROUP , PASSWORD
    let res = await apiController.postToServer("user/update", {
      UserId: uId,
      UserValues: "NEW_NAME,NEW_USER_NAME," + ug2._id + ",NEW_PASSWORD"
    });

    // EXPECT THE RES STATUS CODE SUCCESS
    expect(res.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    let noUserValue = await apiController.postToServer("user/update", {
      UserId: uId,
      UserParameters: "Name,UserName,UserGroup,Password"
    });
    expect(noUserValue.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    let noUserId = await apiController.postToServer("user/update", {
      UserParameters: "Name,UserName,UserGroup,Password",
      UserValues: "NEW_NAME,NEW_USER_NAME," + ug2._id + ",NEW_PASSWORD"
    });
    expect(noUserId.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );
  });

  test("Updating the UserId which doesnot exist", async () => {
    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
    let ug1 = await userGroup.add("USER_GROUP_1");

    // CREATE USER With UserName called USER_NAME
    let u1 = await user.add(ug1._id, "NAME_1", "USER_NAME_1", "PASSWORD_1");

    // delete all the user from db
    await user.remove(u1._id);

    // MAKE API CALL TO UPDATE ITS NAME , USER_NAME , USER_GROUP , PASSWORD
    let res = await apiController.postToServer("user/update", {
      UserId: u1._id,
      UserParameters: "Name,UserName,UserGroup,Password",
      UserValues: "NEW_NAME,NEW_USER_NAME," + ug1._id + ",NEW_PASSWORD"
    });

    // EXPECT THE RES STATUS CODE SUCCESS
    expect(res.statusCode).toEqual(statusHandler.ENTRY_NOT_FOUND.statusCode);
  });

  test("Updating the UserGroup which doesnot exist", async () => {
    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
    let ug1 = await userGroup.add("USER_GROUP_1");

    // CREATE USER With UserName called USER_NAME
    let u1 = await user.add(ug1._id, "NAME", "USER_NAME", "PASSWORD");

    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_2
    let ug2 = await userGroup.add("USER_GROUP_2");

    await userGroup.remove(ug2._id);

    // MAKE API CALL TO UPDATE ITS NAME , USER_NAME , USER_GROUP , PASSWORD
    let res = await apiController.postToServer("user/update", {
      UserId: u1._id,
      UserParameters: "Name,UserName,UserGroup,Password",
      UserValues: "NEW_NAME,NEW_USER_NAME," + ug2._id + ",NEW_PASSWORD"
    });

    // EXPECT THE RES STATUS CODE SUCCESS
    expect(res.statusCode).toEqual(statusHandler.ENTRY_NOT_FOUND.statusCode);
  });

  test("Updating the user with parameters which are not in the list of valid Parameters ", async () => {
    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
    let ug1 = await userGroup.add("USER_GROUP_1");

    // CREATE USER With UserName called USER_NAME
    let u1 = await user.add(ug1._id, "NAME_1", "USER_NAME_1", "PASSWORD_1");

    // MAKE API CALL TO UPDATE ITS NAME , USER_NAME , USER_GROUP , PASSWORD
    let res = await apiController.postToServer("user/update", {
      UserId: u1._id,
      UserParameters: "UserName1",
      UserValues: "SOME_VALUE"
    });

    // EXPECT THE RES STATUS CODE SUCCESS
    expect(res.statusCode).toEqual(statusHandler.INVALID_PARAMETERS.statusCode);
  });

  test("Updating the user with duplicate Name", async () => {
    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
    let ug1 = await userGroup.add("USER_GROUP_1");

    // CREATE USER With UserName called USER_NAME
    let u1 = await user.add(ug1._id, "NAME_1", "USER_NAME_1", "PASSWORD_1");

    let u2 = await user.add(ug1._id, "NAME_2", "USER_NAME_2", "PASSWORD_2");

    // MAKE API CALL TO UPDATE ITS NAME , USER_NAME , USER_GROUP , PASSWORD
    let res = await apiController.postToServer("user/update", {
      UserId: u1._id,
      UserParameters: "Name",
      UserValues: "NAME_2"
    });

    // EXPECT THE RES STATUS CODE SUCCESS
    expect(res.statusCode).toEqual(statusHandler.SUCCESS.statusCode);

    // GET USER FROM DB
    let updatedUserFromDb = await user.read(u1._id);

    // MAKE SURE THAT ALL THE PARAMETERS OF THE USER IS UPDATED AS PER API
    expect(updatedUserFromDb.Name).toEqual("NAME_2");
    expect(updatedUserFromDb.UserName).toEqual("USER_NAME_1");
    expect(updatedUserFromDb.UserGroup.toString()).toEqual(ug1._id.toString());

    // GET USER FROM DB
    let updatedUserFromDb1 = await user.read(u2._id);

    // MAKE SURE THAT ALL THE PARAMETERS OF THE USER IS UPDATED AS PER API
    expect(updatedUserFromDb1.Name).toEqual("NAME_2");
    expect(updatedUserFromDb1.UserName).toEqual("USER_NAME_2");
    expect(updatedUserFromDb1.UserGroup.toString()).toEqual(ug1._id.toString());
  });

  test("Updating the user with duplicate userName", async () => {
    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
    let ug1 = await userGroup.add("USER_GROUP_1");

    // CREATE USER With UserName called USER_NAME_1
    let u1 = await user.add(ug1._id, "NAME_1", "USER_NAME_1", "PASSWORD_1");

    // CREATE USER With UserName called USER_NAME_2
    await user.add(ug1._id, "NAME_2", "USER_NAME_2", "PASSWORD_2");

    // MAKE API CALL TO UPDATE ITS NAME , USER_NAME , USER_GROUP , PASSWORD
    let res = await apiController.postToServer("user/update", {
      UserId: u1._id,
      UserParameters: "UserName",
      UserValues: "USER_NAME_2"
    });

    // EXPECT THE RES STATUS CODE SUCCESS
    expect(res.statusCode).toEqual(statusHandler.DUPLICATE_ENTRY.statusCode);
  });

  test("Updating the user with all new Data", async () => {
    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
    let ug1 = await userGroup.add("USER_GROUP_1");

    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_2
    let ug2 = await userGroup.add("USER_GROUP_2");

    // CREATE USER With UserName called USER_NAME
    let u1 = await user.add(ug1._id, "NAME_1", "USER_NAME_1", "PASSWORD_1");

    // MAKE API CALL TO UPDATE ITS NAME , USER_NAME , USER_GROUP , PASSWORD
    let res = await apiController.postToServer("user/update", {
      UserId: u1._id,
      UserParameters: "Name,UserName,UserGroup,Password",
      UserValues: "NEW_NAME_1,NEW_USER_NAME_1," + ug2._id + ",NEW_PASSWORD_1"
    });

    // EXPECT THE RES STATUS CODE SUCCESS
    expect(res.statusCode).toEqual(statusHandler.SUCCESS.statusCode);

    // GET USER FROM DB
    let updatedUserFromDb = await user.read(u1._id);

    // MAKE SURE THAT ALL THE PARAMETERS OF THE USER IS UPDATED AS PER API
    expect(updatedUserFromDb.Name).toEqual("NEW_NAME_1");
    expect(updatedUserFromDb.UserName).toEqual("NEW_USER_NAME_1");
    expect(updatedUserFromDb.UserGroup.toString()).toEqual(ug2._id.toString());
  });
});

describe("delete User", () => {
  //delete'
  beforeEach(async () => {
    // delete all userGroups from DB
    await userGroup.removeAll();

    // delete all users from DB
    await user.removeAll();
  });

  test("UserId is mandatory ", async () => {
    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
    let ug1 = await userGroup.add("USER_GROUP_1");

    // CREATE USER With UserName called USER_NAME
    let u = await user.add(ug1._id, "NAME", "USER_NAME", "PASSWORD");

    let res1 = await apiController.postToServer("user/delete", {});

    expect(res1.statusCode).toEqual(
      statusHandler.INSUFFICIENT_PARAMETERS.statusCode
    );

    let res2 = await apiController.postToServer("user/delete", {
      UserId: u._id
    });

    expect(res2.statusCode).toEqual(statusHandler.SUCCESS.statusCode);
  });

  test("Deleting UserId which doesnot exits in DB", async () => {
    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
    let ug1 = await userGroup.add("USER_GROUP_1");

    // CREATE USER With UserName called USER_NAME
    let u1 = await user.add(ug1._id, "NAME_1", "USER_NAME_1", "PASSWORD_1");

    await user.remove(u1._id);

    let res = await apiController.postToServer("user/delete", {
      UserId: u1._id
    });

    expect(res.statusCode).toEqual(statusHandler.ENTRY_NOT_FOUND.statusCode);
  });

  test("Deleting UserId which exists in DB", async () => {
    // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
    let ug1 = await userGroup.add("USER_GROUP_1");

    // CREATE USER With UserName called USER_NAME
    let u1 = await user.add(ug1._id, "NAME_1", "USER_NAME_1", "PASSWORD_1");

    let res = await apiController.postToServer("user/delete", {
      UserId: u1._id
    });

    expect(res.statusCode).toEqual(statusHandler.SUCCESS.statusCode);

    expect(await user.isExists(u1._id)).toEqual(false);
  });
});

// describe("login", () => {
//     beforeEach(async () => {
//         // delete all userGroups from DB
//         await userGroup.removeAll();

//         // delete all users from DB
//         await user.removeAll();
//     });

//     test("username and password manadatory", async () => {
//         // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
//         let ug1 = await userGroup.add("USER_GROUP_1");

//         // CREATE USER With UserName called USER_NAME
//         let u = await user.add(ug1._id, "NAME", "USER_NAME", "PASSWORD")

//         let res = await apiController.postToServer("user/login", {
//             Password: "PASSWORD"
//         });

//         expect(res.statusCode).toEqual(statusHandler.INSUFFICIENT_PARAMETERS.statusCode);

//         let res1 = await apiController.postToServer("user/login", {
//             UserName: "USER_NAME"
//         });

//         expect(res1.statusCode).toEqual(statusHandler.INSUFFICIENT_PARAMETERS.statusCode);

//         // let res2 = await apiController.postToServer("user/login", {
//         //     UserName: "USER_NAME",
//         //     Password: "PASSWORD"
//         // });

//         // expect(res2.statusCode).toEqual(statusHandler.SUCCESS.statusCode);

//     })

//     test("login with UserName that doesnot exits", async () => {
//         // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
//         let ug1 = await userGroup.add("USER_GROUP_1");

//         // CREATE USER With UserName called USER_NAME
//         let user1 = await user.add(ug1._id, "NAME", "USER_NAME", "PASSWORD")

//         let res1 = await apiController.postToServer("user/login", {
//             UserName: "USER_NAME1",
//             Password: "PASSWORD"
//         });

//         expect(res1.statusCode).toEqual(statusHandler.ENTRY_NOT_FOUND.statusCode);

//     })

//     test("login with Password that is wrong ", async () => {
//         // CREATE USERGROUP WITH UserGroupName called USER_GROUP_1
//         let ug1 = await userGroup.add("USER_GROUP_1");

//         // CREATE USER With UserName called USER_NAME
//         let user1 = await user.add(ug1._id, "NAME", "USER_NAME", "PASSWORD")

//         let res1 = await apiController.postToServer("user/login", {
//             UserName: "USER_NAME",
//             Password: "PASSWORD1"
//         });

//         expect(res1.statusCode).toEqual(statusHandler.ENTRY_NOT_FOUND.statusCode);

//     })

// })

// describe("read", () => {

//     beforeEach(async () => {
//         // delete all userGroups from DB
//         await userGroup.removeAll();

//         // delete all users from DB
//         await user.removeAll();
//     });

//     test("Reading user when user logged in must return User", async () => {

//         // CREATE USERGROUP
//         let ug1 = await userGroup.add("USER_GROUP_1");

//         // CREATE USER
//         let user1 = await user.add(ug1._id, "NAME", "USER_NAME", "PASSWORD")

//         // LOGIN THE USER WITH HELPER METHOD

//         let userLogin = await user.login("USER_NAME", "PASSWORD", PORT_TO_TEST)

//         expect(await user.isExists("USER_NAME")).toEqual(true);

//         // // MAKE API CALL TO READ

//         let res = await user.read(user1._id)

//         // // RES --> SUCCESS
//         console.log(res.UserName, "read here");

//         // expect(res.statusCode).toEqual(statusHandler.SUCCESS.statusCode);

//         // // // RES-->msg -->User : {same as that is created }

//     })
//     test("Reading user when user logged out must return INVALID PARAMETERS", async () => {

//         // CREATE USERGROUP
//         let ug1 = await userGroup.add("USER_GROUP_1");
//         // CREATE USER
//         let user1 = await user.add(ug1._id, "NAME", "USER_NAME", "PASSWORD")

//         // LOGIN THE USER WITH HELPER METHOD

//         let userLogin = await user.login("USER_NAME", "PASSWORD", PORT_TO_TEST)

//         expect(await user.isExists("USER_NAME")).toEqual(true);

//         // LOGOUT

//         let res = await user.logout(PORT_TO_TEST)

//         console.log(res, "logout");

//         // MAKE API CALL TO READ
//         let readUser = await user.read(user1._id)

//         console.log(readUser, "after logout");
//         // // RES --> INVALID

//         let res1 = await apiController.getFromServer("user/read", {

//         });

//         expect(res1.statusCode).toEqual(statusHandler.INVALID_PARAMETERS.statusCode);

//     })
// })

afterAll(async () => {
  // STOP THE TEST SERVER
  await app.stop();
});
