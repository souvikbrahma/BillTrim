const app = require("../app");
const testConfig = require("../configs/testConfig")
const userGroup = require("./mockDB/userGroup");
const user = require("./mockDB/user");
const statusHandler = require("../handlers/statusHandler");
const PORT_TO_TEST = 4000;
const apiController = new(require("./apiController"))(PORT_TO_TEST);

beforeAll(async () => {

    // START THE TEST SERVER
    testConfig.WEBSERVER_PORT = PORT_TO_TEST;
    await app.start(testConfig)
});

describe('Create UserGroup', () => {
    beforeEach(async () => {
        // remove all usergroups from db
        await userGroup.removeAll();
    });

    test('UserGroupName  is mandatory', async () => {

        let res = await apiController.postToServer("usergroup/create", {});
        expect(res.statusCode).toEqual(statusHandler.INSUFFICIENT_PARAMETERS.statusCode);
    });

    test('duplicate UserGroupName not allowed ', async () => {
        // add a userGroupName to db
        await userGroup.add("DUPLICATE_USER_GROUP_1");

        // make api call with the same usergroup name 
        let res = await apiController.postToServer("usergroup/create", {
            UserGroupName: "DUPLICATE_USER_GROUP_1"
        });

        // res to should be duplicate entry 
        expect(res.statusCode).toEqual(statusHandler.DUPLICATE_ENTRY.statusCode);

    });

    test('creating valid UsegroupName ', async () => {
        // add a UserGroupName  called USER_GROUP_1 to db 
        await userGroup.add("USER_GROUP_1");

        // make api call with UserGroupName called USER_GROUP_2 to db
        let res = await apiController.postToServer("usergroup/create", {
            UserGroupName: "USER_GROUP_2"
        });


        // expect res to be success
        expect(res.statusCode).toEqual(statusHandler.SUCCESS.statusCode);


        // USER_GROUP_1 must be inside db
        expect(await userGroup.isExists("USER_GROUP_1")).toEqual(true);

        // USER_GROUP_2 must be inside db
        expect(await userGroup.isExists("USER_GROUP_2")).toEqual(true);

    });


});


describe('Fetch UserGroups', () => {
    beforeEach(async () => {
        await userGroup.removeAll();
    });

    test('when no userGroup exists in DB', async () => {
        // make api call
        let res = await apiController.getFromServer("userGroup/fetch", {});

        // result to be success 
        expect(res.statusCode).toEqual(statusHandler.SUCCESS.statusCode);

        // result.msg.UserGroups should be empty
        expect(res.msg.UserGroups).toEqual([]);

    });

    test('when 1 userGroup exists in DB', async () => {
        // add userGroup called USER_GROUP_1 in DB
        let ug = await userGroup.add("USER_GROUP_1");
        // make api call
        let res = await apiController.getFromServer("usergroup/fetch", {});
        // result to be success 
        expect(res.statusCode).toEqual(statusHandler.SUCCESS.statusCode);
        expect(res.msg.UserGroups.length).toEqual(1);
        expect(res.msg.UserGroups[0]._id.toString()).toEqual(ug._id.toString())
        expect(res.msg.UserGroups[0].Pages).toEqual([])
        expect(res.msg.UserGroups[0].UserGroupName).toEqual("USER_GROUP_1")



    });
});

describe('Delete UserGroup', () => {
    beforeEach(async () => {
        await userGroup.removeAll();
        await user.removeAll();
    });



    test('Deleting the userGroup which has 1 user must not be allowed and must retuen INVALID status', async () => {
        // add userGroup called USER_GROUP_1 in DB
        let ug = await userGroup.add("USER_GROUP_1");


        // CREATE USER With UserName called USER_NAME
        let u = await user.add(ug._id, "NAME", "USER_NAME", "PASSWORD")


        // make api call 
        let res = await apiController.postToServer("usergroup/delete", {
            UserGroupId: ug._id
        });

        // result to be success 
        expect(res.statusCode).toEqual(statusHandler.INVALID_PARAMETERS.statusCode);


    });


    // TODO
    test('Deleting valid UserGroup must return success', async () => {
        // add userGroup called USER_GROUP_1 in DB
        let ug = await userGroup.add("USER_GROUP_1");

        // make api call 
        let res = await apiController.postToServer("usergroup/delete", {
            UserGroupId: ug._id
        });

        // result to be success 
        expect(res.statusCode).toEqual(statusHandler.SUCCESS.statusCode);

        expect(await userGroup.isExists("USER_GROUP_1")).toEqual(false);

    });



});


afterAll(async () => {

    // STOP THE TEST SERVER
    await app.stop();
});